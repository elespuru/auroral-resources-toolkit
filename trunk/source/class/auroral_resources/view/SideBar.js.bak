AN OLDER TEST/PROTOTYPE VERSION THAT EXPLORED VARIOUS DyGraphs and Protovis CODE

/* ************************************************************************

Copyright:

License:

Authors:

************************************************************************ */

/**
 * The Application's SideBar
 */

qx.Class.define("auroral_resources.view.SideBar",
{
	
  extend : qx.ui.container.Composite,

  /*
  *****************************************************************************
     CONSTRUCTOR
  *****************************************************************************
  */
  construct : function(app, mainWindow)
  {
	  var panels = [];

      var group = new qx.ui.form.RadioGroup();
      group.setAllowEmptySelection(true);

      var resize = new qx.ui.container.Resizer(new qx.ui.layout.Grow);
      resize.setDecorator("pane");
      resize.setWidth(100);
      resize.setHeight(100);
      resize.setPadding(5);
      resize.setBackgroundColor("gray");

      var scroll = new qx.ui.container.Scroll();
      resize.add(scroll);

      var vbox = new qx.ui.container.Composite(new qx.ui.layout.VBox(5));
      vbox.setPadding(0);
      scroll.add(vbox);

      var labelSource = new qx.ui.basic.Label().set({
	    value: app.tr("Tools"),
	    rich : true,
	    alignX: "center"
      });

      vbox.add(labelSource, { left : 40, top: 10 });

      var numbers = ["Time-Series", "Maps", "Imagery", "Misc"];

      for ( var i=0; i< numbers.length; i++) {
	
	        var panel = new collapsablepanel.Panel( numbers[i] );
	        panel.setAppearance( "collapsable-panel" );
	        panel.setGroup(group);
	        panels.push(panel);

	        var tree = new qx.ui.tree.Tree().set({ width : 200, height : 400 });
			var root = new qx.ui.tree.TreeFolder(numbers[i]);
			root.setOpen(true);
			tree.setRoot(root);
			tree.setOpenMode("click");
			tree.setHideRoot(1);

	        if(numbers[i] == 'Time-Series') {
				var te1_1 = new qx.ui.tree.TreeFolder("GOES");
				var te1_2 = new qx.ui.tree.TreeFolder("Iono");

				// Create some content (leaves) and add it to the "Files" folder:
				var te1_2_1 = new qx.ui.tree.TreeFile("DyGraphs");
				te1_2_1.setIcon("icon/22/actions/edit-find.png");
				var te1_2_2 = new qx.ui.tree.TreeFile("ProtoVis Stack");
				var te1_2_4 = new qx.ui.tree.TreeFile("ProtoVis Bar");
				var te1_2_3 = new qx.ui.tree.TreeFile("TableWithPlots");

				te1_2_1.addListener("click", function(e) {

			      var datas = [];
			      for (var i=1;i<1000;i++){
			          datas.push([new Date((1000000000+i*36)*1000),Math.random(),Math.sin(i/100)]);
			      }

			      var options = {
			          lables: [ 'Random','Sin' ]
			      };

			      var plotDemos = [{
			          title: 'CSV String Input',
			          data: 'Date,Value\n2008-05-23,578.55\n2008-06-08,566.5\n2008-07-25,480.88\n2008-08-22,509.84\n'
			               +'2008-09-26,454.13\n2008-10-24,379.75\n2008-11-08,303\n2008-12-26,308.56\n'
			               +'2009-01-23,299.14\n2009-02-09,346.51\n2009-03-20,325.99\n2009-04-24,386.15\n',
			          options: { 
			              fillGraph: true,
			              errorBars: false,
			              labelsKMB: true
			          }
			      },{
			          title: 'Array Input',
			          data: datas,
			          options: options
			      },{
				      title: 'BC840 foF2 Layer',
				      data: 'ionofof2.txt',
				      options: { 
					      labelsKMB: true, 
					      errorBars: false, 
					      lables: ['bc840_foF2'] 
					  }
			      }
			      ];

	            	var win = new qx.ui.window.Window(plotDemos[2].title);

	            	win.set({
	                	width: 600,
	                	height: 400,
	                    allowMaximize: false,
	                    allowMinimize: false,
	                	showMaximize: false,
	                	showMinimize: false,
	                	showClose: true,
	                	layout: new qx.ui.layout.Grow()
	            	});

	            	win.open();

	            	var plot = new qxdygraphs.Plot(
	                	plotDemos[2].data,
	                	plotDemos[2].options
	            	);

	            	win.add(plot);

					mainWindow.add(win, {left:25, top:25});
				});

				te1_2_2.addListener("click", function(e) {

				           var win2 = new qx.ui.window.Window("Live Stacked Chart").set({
				                layout: new qx.ui.layout.Grow(),
				                width: 300,
				                height: 610,
			                    allowMaximize: false,
			                    allowMinimize: false,
			                	showMaximize: false,
			                	showMinimize: false,
			                	showClose: true,
				                contentPadding: 0
				             });

				             win2.open();

				            var chart2 = new qxprotovis.Panel();
				            win2.add(chart2);
				            var pv2 = chart2.getPv();
				            var data = pv2.range(4).map(function() {
				                return pv2.range(0, 10, .1).map(function(x) {
				                    return {x: x, y: Math.sin(x) + Math.random() * .5 + 2};
				                });
				            });

				            var vis2 = chart2.getPanel()
				                .bottom(20)
				                .left(20)
				                .right(10)
				                .top(15 );

				            var x = pv2.Scale.linear(0, 9.9).range(0, 270);
				            var y = pv2.Scale.linear(0, 14).range(0, 520);

				            win2.addListener('resize',function(e){
				                var s=e.getData();
				                x.range(0,s.width-30);
				                y.range(0,s.height-80);
				                vis2.render();
				            });

				            /* The stack layout. */
				            var layer = vis2.add(pv2.Layout.Stack)
				                .layers(data)
				                .x(function(d){return x(d.x)})
				                .y(function(d){return y(d.y)})
				                .layer;
				            var area = layer.add(pv2.Area);


				            vis2.add(pv2.Rule)
				                .data(function(){return x.ticks()})
				                .left(x)
				                .top(-4)
				                .bottom(-4)
				                .strokeStyle(function(d){ return d ? "rgba(128,128,128,.2)" : "#000"})
				             .anchor("bottom").add(pv2.Label)
				                .text(x.tickFormat);

				            /* Y-axis and ticks. */
				            vis2.add(pv2.Rule)
				                .data(function(){return y.ticks()})
				                .bottom(y)
				                .left(-4)
				                .right(-4)
				                .strokeStyle(function(d){return d ? "rgba(128,128,128,.2)" : "#000"})
				              .anchor("left").add(pv2.Label)
				                .text(y.tickFormat);

				            var shiftData = function(){
				                data.forEach(function(col){
				                    col.shift();
				                    var x = col[col.length-1].x + 0.1;   
				                    col.push({
				                        x: x, 
				                        y: Math.sin(x) + Math.random() * .5 + 2
				                    });
				                });
				                x.domain(data[0][0].x,data[0][data[0].length-1].x);                    
				                vis2.render();
				            };
				            setInterval(shiftData, 400);

					mainWindow.add(win2,{left: 20, top: 20});


	            });

				te1_2_3.addListener("click", function(e) {

		            var win = new qx.ui.window.Window("Table With Cell Graphs").set({
		                layout : new qx.ui.layout.Grow(),
		                allowClose: true,
		                allowMaximize: false,
		                allowMinimize: false,
	                	showMaximize: false,
	                	showMinimize: false,
	                	showClose: true,
		                contentPadding: 0,
		                width: 800,
		                height: 400
		            });

		            win.addListener('appear',function(){
		                win.center();
		            });
		            win.open();

		            // table model
		            var tableModel = new qx.ui.table.model.Simple();
		            tableModel.setColumns([ app.tr("ID"), "Bar", "Spark", "TwoBar","QBars","DoubleBar" ]);

		            var rowData = [];
		            var now = new Date().getTime();
		            var dateRange = 400 * 24 * 60 * 60 * 1000; // 400 days
		            var nextId = 0;
		            for (var row = 0; row < 100; row++) {
		                var spark = [];
		                for (var i=0;i<30;i++){
		                    spark.push(Math.random()*100);
		                }
		                var qBars = {
		                    left: Math.round(Math.random()*8),
		                    right: Math.round(Math.random()*8),
		                    data: spark
		                };
		                var two = {
		                    mainbar: Math.random()*10,
		                    stackbar: Math.random()*3
		                };
		                var dbl = [
		                    Math.random()*10,
		                    Math.random()*10
		                ];
		                rowData.push([row,row,spark,two,qBars,dbl]);
		            }

		            tableModel.setData(rowData);
		            // table
		            var table = new qx.ui.table.Table(tableModel).set({
		                decorator: null
		            })

		            var tColMod = table.getTableColumnModel();

		            var barRenderer = new canvascell.Renderer(
		                new canvascell.plotter.Bar({
		                    fill   : '#280',
		                    border : '#260'
		                })
		            );
		            tColMod.setDataCellRenderer(1,barRenderer);

		            var sparkRenderer = new canvascell.Renderer(
		                new canvascell.plotter.SparkLine({
		                    lineWidth   : 0.5,
		                    lineColor   : '#228',
		                    sparkRadius : 1,
		                    sparkColor  : '#f22',
		                    singleScale : true,
		                    depth       : 30
		                })
		            );
		            tColMod.setDataCellRenderer(2,sparkRenderer);

		            var twoBarRenderer = new canvascell.Renderer(
		                new canvascell.plotter.TwoBar({
		                    mainbarFill    : '#b00',
		                    mainbarBorder  : '#a00',
		                    stackbarFill   : '#b80',
		                    stackbarBorder : '#a70'
		                })
		            );
		            tColMod.setDataCellRenderer(3,twoBarRenderer);

		            var qBarsRenderer = new canvascell.Renderer(
		                new canvascell.plotter.QBars({
		                    badBarColor:  '#f00',
		                    badBgColor:   '#f88',
		                    goodBarColor: '#0a0',
		                    goodBgColor:  '#afa'
		                })
		            );
		            tColMod.setDataCellRenderer(4,qBarsRenderer);

		            var doubleBarRenderer = new canvascell.Renderer(
		                new canvascell.plotter.DoubleBar({
		                    upFill    : '#b00',
		                    upBorder  : '#a00',
		                    downFill   : '#b80',
		                    downBorder : '#a70'
		                })
		            );

		            te1_2_4.addListener("click", function(e) {
			            var win = new qx.ui.window.Window("Bar Chart").set({
			                layout: new qx.ui.layout.Grow(),
			                width: 610,
			                height: 300,
		                    allowMaximize: false,
		                    allowMinimize: false,
		                	showMaximize: false,
		                	showMinimize: false,
		                	showClose: true,
			                contentPadding: 0
			             });
			             win.open();

			            var chart = new qxprotovis.Panel();
			            win.add(chart);

			            var pv = chart.getPv();
			            var data = pv.range(10).map(function(d) { return Math.random() + .1; });
			            var vis = chart.getPanel()
			                .bottom(20)
			                .left(20)
			                .right(10)
			                .top(5)
			                .def("i", -1);            

			            var x = pv.Scale.linear(0, 1.1).range(0, 570);
			            var y = pv.Scale.ordinal(pv.range(10)).splitBanded(0, 230, 4/5);
			            win.addListener('resize',function(e){
			                var s=e.getData();
			                x.range(0,s.width-30);
			                y.splitBanded(0,s.height-50,4/5);
			                vis.render();
			            });
			            var bar = vis.add(pv.Bar)
			               .data(data)
			               .top(function(){return y(app.index)})
			               .height(function(){return y.range().band})
			               .left(0)
			               .width(x)
			               .fillStyle(function(){return vis.i() == app.index ? "orange" : "steelblue"})
			               .event("mouseover", function(){return vis.i(app.index)})
			               .event("mouseout", function(){return vis.i(-1)});

			            /* The value label. */
			            bar.anchor("right").add(pv.Label)
			                .textStyle("white")
			                .text(function(d){return d.toFixed(2)});

			            /* The variable label. */
			            bar.anchor("left").add(pv.Label)
			                .textMargin(5)
			                .textAlign("right")
			                .text(function(){return "ABCDEFGHIJK".charAt(app.index)});

			            /* X-axis ticks. */
			            vis.add(pv.Rule)
			                .data(function(){return x.ticks(5)})
			                .left(x)
			                .strokeStyle(function(d){return d ? "rgba(255,255,255,.3)" : "#000"})
			            .add(pv.Rule)
			                .bottom(0)
			                .height(5)
			                .strokeStyle("#000")
			            .anchor("bottom").add(pv.Label)
			                .text(x.tickFormat);	

						mainWindow.add(win, {left: 20, top: 20});

		            });

		            tColMod.setDataCellRenderer(5,doubleBarRenderer);
		            win.add(table);

					mainWindow.add(win, {left:25, top:25});


		        });

				te1_2.add(te1_2_1, te1_2_2, te1_2_3, te1_2_4);

				// Add the content to the root folder
				root.add(te1_1, te1_2);
			} else {
				var te1_1 = new qx.ui.tree.TreeFolder("NOT YET IMPLEMENTED");
				root.add(te1_1);
			}

	        panel.add(tree);

	        vbox.add(panel);
	        panel.setValue(false);
	      }

	      panels[0].setValue(true);
	      return resize;

  },


  /*
  *****************************************************************************
  *  Helper functions for creating the menubar and its associated actions 
  *****************************************************************************
  */
  members : 
  {
  },


  /*
  *****************************************************************************
  *****************************************************************************
  */
  destruct : function()
  {
	// TODO: add destructor code...
  }


});
